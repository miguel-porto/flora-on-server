## THIS FILE HAS ALL THE AQL QUERIES USED THROUGHOUT ##
## except minor fragments                            ##
#######################################################

ListDriver.2=FOR v IN %1$s FILTER v.territoryType=='%2$s' RETURN v._id
ListDriver.3=FOR v IN %1$s SORT v.name RETURN v._id
ListDriver.3a=FOR v IN @@nodetype RETURN v._id
ListDriver.4=FOR v IN %1$s FILTER v.showInChecklist==true SORT v.name RETURN v
ListDriver.5=FOR v IN %1$s FILTER v.territoryType=='%2$s' SORT v.name RETURN v
ListDriver.6=FOR v IN %1$s SORT v.name RETURN v
ListDriver.6a=FOR v IN @@nodetype RETURN v

Checklist=\
LET root = (FOR root IN taxent FILTER root.rank == 10 RETURN root)[0] \
FOR taxa IN ( \
    FOR thistaxon, e1a, path IN 1..1000 INBOUND root PART_OF \
        FILTER thistaxon.isSpeciesOrInf \
        LET nchildr = LENGTH(FOR v IN 1..1 INBOUND thistaxon PART_OF FILTER v.current RETURN v) \
        FILTER nchildr == 0 \
        LET wdct = (FOR v IN 0..100 ANY thistaxon SYNONYM \
            FILTER v.worldDistributionCompleteness == 'DISTRIBUTION_COMPLETE' LIMIT 1 \
            RETURN v)[0] \
        LET oldid = thistaxon.oldId == NULL ? (FOR v IN 0..100 ANY thistaxon SYNONYM \
            FILTER v.oldId != NULL LIMIT 1 \
            RETURN v)[0].oldId : thistaxon.oldId \
        /* This is a copy of QueryDriver.5 to get the accepted taxon */ \
        LET possible = (FOR ve, ed, pa IN 0..10 OUTBOUND thistaxon PART_OF, ANY SYNONYM \
            PRUNE ve.current FILTER ve.current \
            RETURN {v:ve, l:LENGTH(pa.edges), p:pa}) \
        LET acceptedTaxon = (FOR p IN possible \
            SORT p.v.rank DESC, p.l ASC LIMIT 1 RETURN p) \
        RETURN {taxent: MERGE(thistaxon, {"oldId": oldid}) \
            , worldDistributionCompleteness: wdct != NULL \
            , worldDistributionCompletenessTaxEnt: wdct \
            , territories: {@TraverseTerritoriesFragment} \
            , higherTaxonomy: path.vertices \
            , acceptedTaxon: acceptedTaxon[0].v \
            , relationships: acceptedTaxon[0].p.edges[* RETURN PARSE_IDENTIFIER(CURRENT._id).collection] \
        } \
    ) COLLECT taxent = taxa.taxent INTO taxg \
    RETURN taxg[0].taxa

## Same as previous without the is-leaf filter
Checklist.1=\
LET root = (FOR root IN taxent FILTER root.rank == 10 RETURN root)[0] \
FOR taxa IN ( \
    FOR thistaxon, e1a, path IN 1..1000 INBOUND root PART_OF, ANY SYNONYM \
        FILTER thistaxon.isSpeciesOrInf \
        LET wdct = (FOR v IN 0..100 ANY thistaxon SYNONYM \
            FILTER v.worldDistributionCompleteness == 'DISTRIBUTION_COMPLETE' LIMIT 1 \
            RETURN v)[0] \
        LET oldid = thistaxon.oldId == NULL ? (FOR v IN 0..100 ANY thistaxon SYNONYM \
            FILTER v.oldId != NULL LIMIT 1 \
            RETURN v)[0].oldId : thistaxon.oldId \
        /* This is a copy of QueryDriver.5 to get the accepted taxon */ \
        LET possible = (FOR ve, ed, pa IN 0..10 OUTBOUND thistaxon PART_OF, ANY SYNONYM \
            PRUNE ve.current FILTER ve.current \
            RETURN {v:ve, l:LENGTH(pa.edges), p:pa}) \
        LET acceptedTaxon = (FOR p IN possible \
            SORT p.v.rank DESC, p.l ASC LIMIT 1 RETURN p) \
        RETURN {taxent: MERGE(thistaxon, {"oldId": oldid}) \
            , worldDistributionCompleteness: wdct != NULL \
            , worldDistributionCompletenessTaxEnt: wdct \
            , territories: {@TraverseTerritoriesFragment} \
            , higherTaxonomy: path.vertices \
            , acceptedTaxon: acceptedTaxon[0].v \
            , relationships: acceptedTaxon[0].p.edges[* RETURN PARSE_IDENTIFIER(CURRENT._id).collection] \
        } \
    ) COLLECT taxent = taxa.taxent INTO taxg \
    RETURN taxg[0].taxa

## This fragment is to be reused in several queries
## it traverses all the territories from the given taxent - given as thistaxon
## These fields must correspond to those in TaxEntAndNativeStatusResult
TraverseTerritoriesFragment=\
thistaxon.rank <= 100 ? [] : (FILTER thistaxon.rank > 100 /* only seek territories for ranks lower than family */ \
FOR v,e,p IN 1..100 OUTBOUND thistaxon EXISTS_IN, INBOUND PART_OF, ANY SYNONYM, BELONGS_TO \
	FILTER PARSE_IDENTIFIER(v).collection == 'territory' \
    LET ns=(FOR e1 IN p.edges FILTER e1.nativeStatus!=NULL LIMIT 1 RETURN e1)[0]       /* this is the 1st EXISTS_IN edge */ \
    LET direction = (FOR e1 IN 0..(LENGTH(p.edges)-1) RETURN p.edges[e1]._from==p.vertices[e1]._id ? 'OUTBOUND' : 'INBOUND') \
    RETURN { \
        depth: LENGTH(p.edges) \
        ,existsIn: ns \
        ,territory: v \
        ,vertices: p.vertices[*]._id \
        ,worldDistributionCompleteness: p.vertices[*].worldDistributionCompleteness \
        ,completeDistributionUpstream: (FOR v1 IN 0..100 OUTBOUND v BELONGS_TO FILTER v1._id IN thistaxon.territoriesWithCompleteDistribution RETURN v1._id)[0] \
        ,edges: p.edges[* RETURN PARSE_IDENTIFIER(CURRENT._id).collection] \
        ,direction: direction \
    } \
)

## Fetch all taxon isLeaf nodes and, for each one, the list of territorires and EXISTS_IN relationships.
## TODO: now this traverses the taxonomy downwards, so a species with subspecies does not need to have status assigned.
## however, traversing upwards could also provide useful information...
## Returns an array of TaxEntAndNativeStatusResult class.
ListDriver.7=\
FOR thistaxon IN %2$s %5$s \
	LET npar=LENGTH(FOR v IN 1..1 INBOUND thistaxon PART_OF FILTER v.current==true RETURN v) \
	FILTER thistaxon.isSpeciesOrInf==true %1$s %4$s SORT thistaxon.name %3$s \
	LET wdct = (FOR v IN 0..100 ANY thistaxon SYNONYM \
		FILTER v.worldDistributionCompleteness == 'DISTRIBUTION_COMPLETE' LIMIT 1 \
		RETURN v)[0] \
    RETURN {taxent: thistaxon \
		, worldDistributionCompleteness: wdct != NULL \
		, worldDistributionCompletenessTaxEnt: wdct \
		, territories: {@TraverseTerritoriesFragment} \
	}
##RETURN {taxent: MERGE(thistaxon, {isLeaf: npar==0}) \

ListDriver.8=\
FOR terr IN territory FILTER terr.shortName == '%1$s' \
    FOR thistaxon IN 1..1000 INBOUND terr BELONGS_TO, EXISTS_IN, ANY SYNONYM %4$s \
        FILTER thistaxon.isSpeciesOrInf %2$s SORT thistaxon.name %3$s \
        COLLECT a = thistaxon.name INTO tt \
        RETURN tt[0].thistaxon


ListDriver.21=FOR v IN taxent FILTER v.rank==%1$d SORT v.name RETURN v
ListDriver.22=RETURN {nodes:(FOR v IN %1$s RETURN MERGE(v,{type: PARSE_IDENTIFIER(v._id).collection})), links:[]}

## Fetch orphan taxa
ListDriver.23= \
FOR t IN taxent \
    FILTER t.rank == null || t.rank > 10 \
    LET test = (FOR e IN PART_OF FILTER e._from == t._id LIMIT 1 RETURN 1) \
    FILTER LENGTH(test) == 0 \
    /*LET testa = (FOR e IN PART_OF FILTER e._to == t._id LIMIT 1 RETURN 1) \
    FILTER LENGTH(testa) == 0*/ \
    LET test1 = (FOR e IN SYNONYM FILTER e._from == t._id LIMIT 1 RETURN 1) \
    FILTER LENGTH(test1) == 0 \
    LET test1a = (FOR e IN SYNONYM FILTER e._to == t._id LIMIT 1 RETURN 1) \
    FILTER LENGTH(test1a) == 0 \
    LET test2 = (FOR e IN HYBRID_OF FILTER e._from == t._id LIMIT 1 RETURN 1) \
    FILTER LENGTH(test2) == 0 \
    LET test2a = (FOR e IN HYBRID_OF FILTER e._to == t._id LIMIT 1 RETURN 1) \
    FILTER LENGTH(test2a) == 0 \
    RETURN MERGE(t, {type: PARSE_IDENTIFIER(t._id).collection})

## Fetch taxon info (from TaxEnt name) and the list of territories and EXISTS_IN relationships it has.
## Returns an array of TaxEntAndNativeStatusResult class.
ListDriver.24b=\
FOR thistaxon IN taxent \
	FILTER LOWER(thistaxon.name) == '%1$s' %2$s \
	LET wdct = (FOR v IN 0..100 ANY thistaxon SYNONYM \
		FILTER v.worldDistributionCompleteness == 'DISTRIBUTION_COMPLETE' LIMIT 1 \
		RETURN v)[0] \
	RETURN {taxent: thistaxon \
		, worldDistributionCompleteness: wdct != NULL \
		, worldDistributionCompletenessTaxEnt: wdct \
		, territories: {@TraverseTerritoriesFragment} \
	}

## Same as above but for oldId
ListDriver.24c=\
FOR thistaxon IN taxent \
	FILTER thistaxon.oldId == %1$s \
	LET wdct = (FOR v IN 0..100 ANY thistaxon SYNONYM \
		FILTER v.worldDistributionCompleteness == 'DISTRIBUTION_COMPLETE' LIMIT 1 \
		RETURN v)[0] \
	RETURN {taxent: thistaxon \
		, worldDistributionCompleteness: wdct != NULL \
		, worldDistributionCompletenessTaxEnt: wdct \
		, territories: {@TraverseTerritoriesFragment} \
	}

ListDriver.25= \
FOR v1 IN ( \
    FOR v IN 1..1 INBOUND @parent TYPE_OF RETURN DISTINCT v) \
    SORT v1.name \
    RETURN v1

## getChildrenTaxEnt
ListDriver.26=\
FOR v1 IN ( \
    FOR v, e, p IN 1..2 INBOUND @parent PART_OF, HYBRID_OF \
        FILTER (LENGTH(p.edges)==1 && PARSE_IDENTIFIER(p.edges[0]).collection=='PART_OF') \
	        || (LENGTH(p.edges)==2 && PARSE_IDENTIFIER(p.edges[0]).collection=='PART_OF' \
                && PARSE_IDENTIFIER(p.edges[1]).collection=='HYBRID_OF') \
	    RETURN DISTINCT v) \
    SORT v1.name \
    RETURN v1

ListDriver.27= \
FOR h IN habitat \
    FILTER h.level == @level \
    SORT h.name \
    RETURN h

ListDriver.28= \
FOR r IN reference \
    FILTER LIKE(r.authors, @query, true) || LIKE(r.year, @query, true) || LIKE(r.title, @query, true) \
    RETURN r

#########################
## TaxEntWrapperDriver ##
#########################

TaxEntWrapperDriver.0=RETURN LENGTH(FOR e IN PART_OF FILTER e._to=='%1$s' RETURN e)
TaxEntWrapperDriver.1=FOR v IN 1..100 ANY '%1$s' SYNONYM FILTER v._id != '%1$s' RETURN DISTINCT v
TaxEntWrapperDriver.2=FOR v IN 1..1 OUTBOUND '%1$s' PART_OF, HYBRID_OF FILTER v.current RETURN v

## GetEndemismDegree
#TaxEntWrapperDriver.3=\
#FILTER DOCUMENT('%1$s').worldDistributionCompleteness=='DISTRIBUTION_COMPLETE' \
#FOR v,e,p IN 1..100 OUTBOUND '%1$s' EXISTS_IN, PART_OF, ANY SYNONYM, BELONGS_TO \
#    FILTER PARSE_IDENTIFIER(v).collection == 'territory' \
#    && e.nativeStatus IN [%3$s] \
#    RETURN { \
#        depth: LENGTH(p.edges) \
#        , route: p.edges[0] \
#        , vertices: p.vertices[*].name \
#    } \
#)

#LET all=(FOR v,e IN 1..100 OUTBOUND '%1$s' ANY SYNONYM,EXISTS_IN,PART_OF \
#	FILTER e.nativeStatus IN [%3$s] \
#	RETURN v) \
#FOR v IN all \
#	FOR v1 IN 1..100 INBOUND v BELONGS_TO \

# FOR v,e IN 1..100 OUTBOUND '%1$s' ANY SYNONYM,EXISTS_IN,PART_OF \
#	FILTER e.nativeStatus IN [%3$s] \
#	RETURN v.name
		

## SetObservedIn
TaxEntWrapperDriver.4=UPSERT {_from:'%1$s',_to:'%2$s'} INSERT %3$s UPDATE %3$s IN OBSERVED_IN RETURN OLD ? 0 : 1

## setNativeStatus
## remove the EXISTS_IN link, if it exists
TaxEntWrapperDriver.6=FOR e IN EXISTS_IN FILTER e._from=='%1$s' && e._to=='%2$s' REMOVE e IN EXISTS_IN RETURN OLD ? 0 : 1
## create or update the EXISTS_IN link
TaxEntWrapperDriver.7=UPSERT {_from:'%1$s',_to:'%2$s'} INSERT %3$s UPDATE %3$s IN EXISTS_IN RETURN OLD ? 0 : 1

## getIncludedTaxa
TaxEntWrapperDriver.8=FOR v IN 1..1 INBOUND '%1$s' PART_OF FILTER !v.current RETURN v

## getFormerlyIncludedIn
TaxEntWrapperDriver.8a=FOR v IN 1..1 OUTBOUND '%1$s' PART_OF FILTER !v.current RETURN v

## For the given TaxEnt, get the list of territories where it exists (and all details associated).
## These fields must correspond to those in TaxEntAndNativeStatusResult
TaxEntWrapperDriver.9=\
FOR thistaxon IN taxent \
	FILTER thistaxon._id == '%1$s' \
	LET wdct = (FOR v IN 0..100 ANY thistaxon SYNONYM \
		FILTER v.worldDistributionCompleteness == 'DISTRIBUTION_COMPLETE' LIMIT 1 \
		RETURN v)[0] \
	RETURN { \
		taxent: thistaxon \
		, worldDistributionCompleteness: wdct != NULL \
		, worldDistributionCompletenessTaxEnt: wdct \
		, territories: thistaxon.rank <= 100 ? [] : (FILTER thistaxon.rank > 100 /* only seek territories for ranks lower than family */ \
		FOR v,e,p IN 1..100 OUTBOUND thistaxon EXISTS_IN, INBOUND PART_OF, ANY SYNONYM, BELONGS_TO \
			FILTER PARSE_IDENTIFIER(v).collection == 'territory' %2$s \
		    LET ns=(FOR e1 IN p.edges FILTER e1.nativeStatus != NULL LIMIT 1 RETURN e1)[0]       /* this is the 1st EXISTS_IN edge */ \
		    LET direction = (FOR e1 IN 0..(LENGTH(p.edges)-1) RETURN p.edges[e1]._from==p.vertices[e1]._id ? 'OUTBOUND' : 'INBOUND') \
		    RETURN { \
		        depth: LENGTH(p.edges) \
		        ,existsIn: ns \
		        ,territory: v \
		        ,vertices: p.vertices[*]._id \
		        ,worldDistributionCompleteness: p.vertices[*].worldDistributionCompleteness \
		        ,completeDistributionUpstream: (FOR v1 IN 0..100 OUTBOUND v BELONGS_TO FILTER v1._id IN thistaxon.territoriesWithCompleteDistribution RETURN v1._id)[0] \
		        ,edges: p.edges[* RETURN PARSE_IDENTIFIER(CURRENT._id).collection] \
		        ,direction: direction \
		    } \
	    ) \
	}
## this is the fragment %2$s of the above
TaxEntWrapperDriver.9a=&& v.shortName == '%1$s'

TaxEntWrapperDriver.10=\
LET doc=DOCUMENT('%1$s').territoriesWithCompleteDistribution \
FOR t IN (doc==null ? [] : doc) RETURN DOCUMENT(t)

TaxEntWrapperDriver.11=\
LET doc=DOCUMENT('%1$s') \
LET newarr=PUSH(doc.territoriesWithCompleteDistribution, '%2$s', true) \
LET count=LENGTH(newarr) - LENGTH(doc.territoriesWithCompleteDistribution) \
UPDATE doc WITH {territoriesWithCompleteDistribution: newarr} IN taxent \
RETURN count

TaxEntWrapperDriver.12=\
LET doc=DOCUMENT('%1$s') \
LET newarr=REMOVE_VALUE(doc.territoriesWithCompleteDistribution, '%2$s') \
LET count=LENGTH(doc.territoriesWithCompleteDistribution) - LENGTH(newarr) \
UPDATE doc WITH {territoriesWithCompleteDistribution: newarr} IN taxent \
RETURN count

TaxEntWrapperDriver.13=\
FOR v IN 1..100 OUTBOUND '%1$s' PART_OF, ANY SYNONYM \
  FILTER v._id == '%2$s' \
  RETURN v

TaxEntWrapperDriver.14= \
FOR v IN 0..%2$d INBOUND '%1$s' PART_OF, ANY SYNONYM \
    RETURN v

TaxEntWrapperDriver.15= \
FOR v IN 0..100 OUTBOUND @id PART_OF, ANY SYNONYM \
    FILTER v.rank == @rank && v.current \
    LIMIT 1 \
    RETURN v

######################
## NodeWorkerDriver ##
######################

## Detaches the given synonym from the given taxent node, no matter how far it is in the synonym chain.
NodeWorkerDriver.1=\
FOR v,e IN 1..100 ANY '%1$s' SYNONYM \
    FILTER v._id == '%2$s' \
    UPDATE v WITH {current: true} IN taxent \
    REMOVE e IN SYNONYM RETURN OLD

## Get the IDs of all edges connected to the given node
NodeWorkerDriver.2=FOR v,e IN 1 ANY '%1$s' %2$s RETURN e._id

## Get all EXISTS_IN relationships departing from this taxon
NodeWorkerDriver.3=FOR v,e IN 1..100 OUTBOUND '%1$s' EXISTS_IN RETURN {territory: v, existsIn:e}

NodeWorkerDriver.4=FOR v IN attribute FILTER v.name=='%1$s' RETURN v

NodeWorkerDriver.5=FOR v IN territory FILTER v._id=='%1$s' RETURN v

NodeWorkerDriver.6=\
FOR o IN PUSH(UNION( \
	(FOR v IN 1..%3$d ANY '%1$s' %2$s RETURN DISTINCT v._id) \
	, (FOR v,e IN 1..%3$d ANY '%1$s' %2$s RETURN DISTINCT e._id) \
), '%1$s') RETURN o

NodeWorkerDriver.7=\
FOR a IN author \
    FILTER idAut == %1$d \
    RETURN a

NodeWorkerDriver.8=\
LET ne=LENGTH(FOR v,e IN 1..1 INBOUND '%1$s' PART_OF, HYBRID_OF, OUTBOUND OBSERVED_IN, OUTBOUND HAS_QUALITY, OUTBOUND EXISTS_IN RETURN e) \
FILTER ne==0 \
FOR a IN PUSH((FOR v,e IN 1..1 ANY '%1$s' PART_OF, HYBRID_OF, SYNONYM RETURN e._id), '%1$s', true) RETURN a

NodeWorkerDriver.9=\
RETURN {nodes:(FOR n IN @nodes \
    LET v=DOCUMENT(n) RETURN MERGE(v, {type: PARSE_IDENTIFIER(v._id).collection})) \
, links:( \
    FOR start IN @nodes FOR v,e IN 1..1 ANY start %1$s FILTER e._from IN @nodes && e._to IN @nodes \
        RETURN MERGE(e,{type:PARSE_IDENTIFIER(e).collection}))}

NodeWorkerDriver.10=FOR v IN territory FILTER v.shortName=='%1$s' RETURN v

NodeWorkerDriver.11=FOR v IN character FILTER v.name == '%1$s' RETURN v

#NodeWorkerDriver.12=FOR t IN taxent FILTER LIKE(t.name, '%1$s', true) RETURN t
NodeWorkerDriver.12=FOR t IN taxent FILTER LIKE(t.name, '%1$s%%', true) RETURN t

NodeWorkerDriver.13=FOR t IN taxent FILTER t._id IN @ids RETURN t

NodeWorkerDriver.14=\
FOR u IN user FILTER u._id == '%1$s' \
    UPDATE u WITH {uploadedTables: PUSH(u.uploadedTables, '%2$s')} IN user

#RETURN {nodes: \
#	APPEND( [MERGE(DOCUMENT('%1$s'), {type: PARSE_IDENTIFIER('%1$s').collection})] \
#		,(FOR v IN 1..%3$d ANY '%1$s' %2$s RETURN DISTINCT MERGE(v,{type:PARSE_IDENTIFIER(v._id).collection})) \
#		) \
#    ,links:(FOR v,e IN 1..%3$d ANY '%1$s' %2$s RETURN DISTINCT MERGE(e,{type:PARSE_IDENTIFIER(e._id).collection})) \
#}

NodeWorkerDriver.15=FOR d IN @ids RETURN DOCUMENT(d)

Administration.1=FOR u IN user RETURN u
Administration.1a=FOR u IN user FILTER u.password != null RETURN u

Administration.2=FOR u IN user FILTER u.userName == '%1$s' RETURN u

Administration.3=FOR u IN user FILTER u._id == '%1$s' \
    UPDATE u WITH {taxonPrivileges: REMOVE_NTH(u.taxonPrivileges, %2$d)} IN user \
    RETURN NEW

Administration.4=FOR u IN user FILTER u.name == @name RETURN u

Administration.4a=FOR u IN user FILTER LIKE (u.name, @name, true) RETURN u

Administration.4b=FOR u IN user FILTER u.iNaturalistName == @iNaturalistName RETURN u

Administration.5= \
FOR u IN user FILTER u._id == '%1$s' \
    LET newArray = UNION(SLICE(u.taxonPrivileges, 0, %2$d) \
        , [MERGE(u.taxonPrivileges[%2$d], {applicableTaxa: REMOVE_VALUE(u.taxonPrivileges[%2$d].applicableTaxa, '%3$s')})] \
        , SLICE(u.taxonPrivileges, %2$d + 1)) \
    UPDATE u WITH {taxonPrivileges: newArray} IN user \
    RETURN NEW

Administration.6= \
FOR u IN user FILTER u._id == @user \
    LET oldArray = u.customOccurrenceFlavours == null ? [] : u.customOccurrenceFlavours \
    LET newArray = APPEND(oldArray, @flavour) \
    UPDATE u WITH {customOccurrenceFlavours: newArray} IN user \
    RETURN NEW

Administration.7= \
FOR u IN user FILTER u._id == @user \
    FOR flv IN u.customOccurrenceFlavours \
        FILTER flv.name == @flavour \
        UPDATE u WITH {customOccurrenceFlavours: REMOVE_VALUE(u.customOccurrenceFlavours, flv)} IN user \
        RETURN NEW

Administration.8= \
FOR u IN user FILTER u._id == @user \
    LET newfl = (FOR flv IN u.customOccurrenceFlavours \
        RETURN flv.name != @flavour ? flv : ( \
            MERGE(flv, { \
                fields: APPEND(APPEND(SLICE(flv.fields, 0, @ind - 1), [NTH(flv.fields, @ind), NTH(flv.fields, @ind - 1)]), SLICE(flv.fields, @ind + 1)) \
            }))) \
    UPDATE u WITH {customOccurrenceFlavours: newfl} IN user \
    RETURN NEW

Administration.9= \
FOR i in inventory \
    FILTER @user IN i.observers || @user IN i.collectors || @user IN i.dets || i.maintainer == @user \
    COLLECT WITH COUNT INTO length \
    RETURN length

Administration.10=FOR u IN user FILTER u._id == @uid \
    UPDATE u WITH {savedOccurrenceFilters: UNSET(u.savedOccurrenceFilters, @filtername)} IN user \
    OPTIONS { mergeObjects: false } \
    RETURN NEW

QueryDriver.1= \
FOR v IN taxent \
    FILTER LIKE(v.name, '%1$s%%', true) \
    SORT v.rank >= 140 DESC, v.name %2$s \
    RETURN v

QueryDriver.1a= \
FOR v IN taxent \
    LET full = LIKE(v.name, '%1$s%%', true) \
    FILTER full || LIKE(v.name, '%3$s%% %4$s%%', true) \
    SORT full DESC, v.rank >= 140 DESC, v.name %2$s \
    RETURN v

QueryDriver.1b= \
FOR v IN taxent \
    LET full = LIKE(v.name, '%1$s%%', true) \
    FILTER full || LIKE(v.name, '%3$s%% %4$s%%', true) || LIKE(v.name, '%5$s%% %6$s%%', true) \
    SORT full DESC, v.rank >= 140 DESC, v.name %2$s \
    RETURN DISTINCT v

#QueryDriver.2=FOR v IN user FILTER LIKE(v.name, '%1$s%%', true) SORT v.name %2$s RETURN v

QueryDriver.2= \
FOR v IN user \
    FILTER LIKE(v.name, CONCAT(@q1, "%%"), true) \
    SORT v.name %1$s \
    RETURN v

QueryDriver.2a= \
FOR v IN user \
    LET full = LIKE(v.name, CONCAT(@q1, "%%"), true) \
    LET full2 = LIKE(v.name, CONCAT("%%", @q1, "%%"), true) \
    FILTER full || full2 || LIKE(v.name, CONCAT(@first, "%% ", @last, "%%"), true) \
    SORT full DESC, full2 DESC, v.name %1$s \
    RETURN v

QueryDriver.3=FOR topo IN FULLTEXT(toponym, 'locality', @firstletter) RETURN topo

## FILTER (ABS(CHAR_LENGTH(topo.locality) - @length) < 3) || LIKE(topo.locality, @query, true) \
##  FOR topo IN toponym \
##    FILTER LIKE(topo.locality, '%%%1$s%%', true) \
##    RETURN topo
## FULLTEXT(toponym, 'locality', @firstletter) \

QueryDriver.3a= \
FOR topo IN toponym \
    FILTER LIKE(topo.locality, '%1$s%%', true) \
    RETURN topo

## Returns taxa that are PART_OF a family but are not genus
error.1= \
LET root = (FOR root IN taxent FILTER root.rank == 10 RETURN root)[0] \
    FOR t, e, p IN 1..1000 INBOUND root PART_OF \
    FILTER p.vertices[-2].rank == 100 && p.vertices[-1].rank > 140 \
    RETURN t

QueryDriver.4= \
FOR i IN inventory \
    LET usernames = i.observers == null ? null : ( \
        FILTER i.observers != null FOR un IN i.observers \
            FOR u IN user FILTER u._id == un RETURN u.name \
        ) \
    FOR o IN i.unmatchedOccurrences \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: DOCUMENT(o.taxEntMatch)})], observerNames: usernames})

#QueryDriver.5= \
#  FOR te IN @taxEntIDs \
#    LET ted = DOCUMENT(te) \
#    FOR v, e, p IN 0..100 OUTBOUND ted PART_OF, ANY SYNONYM OPTIONS {bfs:true, uniqueVertices:'global'} \
#        FILTER p.vertices[-1].current && p.vertices[-1].isSpeciesOrInf \
#        LET f1 = (FOR v1 IN 0..(LENGTH(p.vertices) - 2) FILTER p.vertices[v1].current RETURN 1) \
#        FILTER LENGTH(p.vertices) == 1 || LENGTH(f1) == 0 \
#        RETURN {taxEntId:ted._id, matchedTaxEnt:v}

QueryDriver.5= \
FOR te IN @taxEntIDs \
    LET possible = (FOR ve, ed, pa IN 0..10 OUTBOUND te PART_OF, ANY SYNONYM \
        PRUNE ve.current FILTER ve.current \
        RETURN {v:ve, l:LENGTH(pa.edges)}) \
    LET bestMatch = (FOR p IN possible \
        SORT p.v.rank DESC, p.l ASC LIMIT 1 RETURN p.v) \
    RETURN {taxEntId:te, matchedTaxEnt:bestMatch[0]}

# BUILD HIGHER TAXONOMY
# the "out" variable is needed to find the path with the least non-current taxa
# FILTER p.vertices[* FILTER CURRENT.rank < 200].current ALL == true && p.vertices[*].rank NONE == 1000 \
QueryDriver.6= \
FOR te IN @taxEntIDs \
    LET current = DOCUMENT(te) \
    LET paths = (FOR v, e, p IN 1..100 OUTBOUND current PART_OF, ANY SYNONYM \
        FILTER p.vertices[-1].rank == 10 \
        FILTER p.vertices[*].rank NONE == 1000 \
        RETURN p.vertices) \
    LET out = LENGTH(paths) == 1 ? paths[0][* FILTER CURRENT.rank < current.rank && !(CURRENT.rank IN [150, 160]) && CURRENT.current] : ( \
        LET nnotcur = (FOR p IN paths RETURN SUM(p[* RETURN CURRENT.current ? 0 : 1])) \
        RETURN paths[POSITION(nnotcur, MIN(nnotcur), true)][* FILTER CURRENT.rank < current.rank && !(CURRENT.rank IN [150, 160]) && CURRENT.current] \
        )[0] \
    RETURN APPEND([DOCUMENT(te)], out)
#FOR te IN @taxEntIDs \
#    LET p=(FOR v IN 1..100 OUTBOUND te PART_OF, ANY SYNONYM \
#        RETURN v) \
#    RETURN APPEND([DOCUMENT(te)], p)

QueryDriver.6r= \
FOR te IN @taxEntIDs \
    LET p=(FOR v IN 1..1000 OUTBOUND te PART_OF, ANY SYNONYM \
        FILTER v.rank == @rank \
        RETURN v) \
    RETURN p[0] == NULL ? (DOCUMENT(te).rank == @rank ? DOCUMENT(te) : NULL) : p[0]
