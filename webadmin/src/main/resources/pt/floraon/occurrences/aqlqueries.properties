## this query should only output one taxon per record.
## NOTE: this query climbs up the taxonomic tree to find which is the highest equivalent node, e.g. a family with only
## one species, then we choose the family
## TODO: the above search does not check for the occurrence in the territory!

nodataint=-999999999

occurrencequery.1= \
/* Climb up the taxonomic tree to see which is the highest node that encloses only this one */ \
LET tree = (FOR v, e, p IN 1..100 OUTBOUND @id PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
    LET children = (FOR v1, e1, p1 IN 1..5 INBOUND v PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
        /* this node is current and is a direct PART_OF, let's count it */ \
        FILTER v1.current && IS_SAME_COLLECTION('PART_OF', e1) /* TODO: v1.current or not??  */\
        /* count nr of PART_OFs */ \
        LET po = (FOR i IN p1.edges FILTER IS_SAME_COLLECTION('PART_OF', i) LIMIT 2 RETURN 1) \
        FILTER LENGTH(po) == 1  /* prune at 1 PART_OF */ \
        LIMIT 2 RETURN 1) \
    RETURN {id:v._id, c:LENGTH(children)}) \
LET last = POSITION(tree[*].c, 2, true) \
LET mother = (last == 0 ? @id : tree[last - 1].id) \
LET taxa = (FOR v IN 0..100 INBOUND mother PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} RETURN DISTINCT v._id) \
FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch IN taxa \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
                FOR u IN user FILTER u._id == un RETURN u.name \
            ) \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: DOCUMENT(o.taxEntMatch)})], \
            observerNames: usernames, maintainerName: DOCUMENT(i.maintainer).name})

occurrencequery.2= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        FILTER i.observers ANY == @observer \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
    LIMIT @off, @cou \
    RETURN a

occurrencequery.2.date= \
FOR a IN FLATTEN( \
    FOR i IN inventory \
        FILTER i.observers ANY == @observer \
        LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
        FILTER rdate >= @from && rdate <= @to \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
    LIMIT @off, @cou \
    RETURN a

occurrencequery.2b= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.uuid IN %2$s \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {unmatchedOccurrences: [o]})

occurrencequery.2a= \
FOR i IN inventory \
    FILTER i.observers ANY == '%1$s' \
    LIMIT %2$d, %3$d \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        SORT o.dateInserted DESC \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        RETURN MERGE(o, {taxEnt: taxent})) \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.3= \
FOR i IN inventory \
    FILTER i._id == '%1$s' \
    LET newo = (FOR o IN i.unmatchedOccurrences \
        FILTER o.uuid != '%2$s' \
        RETURN o) \
    UPDATE i WITH {unmatchedOccurrences: newo} IN inventory \
    RETURN NEW

#SORT i.year DESC, i.month DESC, i.day DESC, i.latitude DESC \
#    LIMIT %2$d, %3$d \

# THESE ARE THE OLD VERSOIN QUERIES. THEY'RE FUNCTIONAL BUT NOT OPTIMIZED FOR SPEED.
#occurrencequery.4= \
#FOR a IN FLATTEN( \
#    FOR i IN inventory \
#        FILTER i.maintainer == '%1$s' \
#        LET occ = (FOR o IN i.unmatchedOccurrences \
#            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
#            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
#        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
#    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
#    LIMIT %2$d, %3$d \
#    RETURN a

#occurrencequery.4.observernames= \
#FOR a IN FLATTEN( \
#    FOR i IN inventory \
#        FILTER i.maintainer == '%1$s' \
#        LET occ = (FOR o IN i.unmatchedOccurrences \
#            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
#            LET usernames = i.observers == null ? null : ( \
#                FILTER i.observers != null FOR un IN i.observers \
#                FOR u IN user FILTER u._id == un RETURN u.name \
#            ) \
#            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})], observerNames: usernames})) \
#        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
#    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
#    LIMIT %2$d, %3$d \
#    RETURN a

#occurrencequery.4.nouser= \
#FOR a IN FLATTEN( \
#    FOR i IN inventory \
#        LET occ = (FOR o IN i.unmatchedOccurrences \
#            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
#            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
#        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
#    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
#    LIMIT %2$d, %3$d \
#    RETURN a

#occurrencequery.4.nouser.observernames= \
#FOR a IN FLATTEN( \
#    FOR i IN inventory \
#        LET occ = (FOR o IN i.unmatchedOccurrences \
#            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
#            LET usernames = i.observers == null ? null : ( \
#                FILTER i.observers != null FOR un IN i.observers \
#                FOR u IN user FILTER u._id == un RETURN u.name \
#            ) \
#            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})], observerNames: usernames})) \
#        RETURN LENGTH(occ) == 0 ? (MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: []})) : occ) \
#    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
#    LIMIT %2$d, %3$d \
#    RETURN a

# THESE ARE THE NEW VERSIONS, MUCH FASTER
# Get occurrences from a given maintainer. Observer names are not populated.
occurrencequery.4= \
LET ret = (FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    FOR o IN i.unmatchedOccurrences \
    SORT o.dateInserted DESC, o.verbTaxon, o.uuid \
    LIMIT %2$d, %3$d \
    RETURN {i:i, o:o}) \
FOR io IN ret \
    LET taxent = io.o.taxEntMatch == null ? null : DOCUMENT(io.o.taxEntMatch) \
    RETURN MERGE(UNSET(io.i, 'unmatchedOccurrences'), {taxa: LENGTH(io.o) == 0 ? [] : [MERGE(io.o, {taxEnt: taxent})]})

# Get occurrences from a given maintainer. Observer names are populated.
occurrencequery.4.observernames= \
LET ret = (FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    FOR o IN i.unmatchedOccurrences \
    SORT o.dateInserted DESC, o.verbTaxon, o.uuid \
    LIMIT %2$d, %3$d \
    RETURN {i:i, o:o}) \
FOR io IN ret \
    LET taxent = io.o.taxEntMatch == null ? null : DOCUMENT(io.o.taxEntMatch) \
    LET usernames = io.i.observers == null ? null : ( \
        FILTER io.i.observers != null FOR un IN io.i.observers \
        FOR u IN user FILTER u._id == un RETURN u.name \
    ) \
    RETURN MERGE(UNSET(io.i, 'unmatchedOccurrences'), {taxa: LENGTH(io.o) == 0 ? [] : [MERGE(io.o, {taxEnt: taxent})],\
        observerNames: usernames, maintainerName: DOCUMENT(io.i.maintainer).name})

# Get all occurrences in DB. Observer names are not populated.
occurrencequery.4.nouser= \
LET ret = (FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
    SORT o.dateInserted DESC, o.verbTaxon, o.uuid \
    LIMIT %2$d, %3$d \
    RETURN {i:i, o:o}) \
FOR io IN ret \
    LET taxent = io.o.taxEntMatch == null ? null : DOCUMENT(io.o.taxEntMatch) \
    RETURN MERGE(UNSET(io.i, 'unmatchedOccurrences'), {taxa: LENGTH(io.o) == 0 ? [] : [MERGE(io.o, {taxEnt: taxent})]})

# Get all occurrences in DB. Observer names are populated.
occurrencequery.4.nouser.observernames= \
LET ret = (FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
    SORT o.dateInserted DESC, o.verbTaxon, o.uuid \
    LIMIT %2$d, %3$d \
    RETURN {i:i, o:o}) \
FOR io IN ret \
    LET taxent = io.o.taxEntMatch == null ? null : DOCUMENT(io.o.taxEntMatch) \
    LET usernames = io.i.observers == null ? null : ( \
        FILTER io.i.observers != null FOR un IN io.i.observers \
        FOR u IN user FILTER u._id == un RETURN u.name \
    ) \
    RETURN MERGE(UNSET(io.i, 'unmatchedOccurrences'), {taxa: LENGTH(io.o) == 0 ? [] : [MERGE(io.o, {taxEnt: taxent})], \
        observerNames: usernames, maintainerName: DOCUMENT(io.i.maintainer).name})


occurrencequery.4b= \
RETURN SUM(FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    RETURN LENGTH(i.unmatchedOccurrences) == 0 ? 1 : LENGTH(i.unmatchedOccurrences))

occurrencequery.4b.nouser= \
RETURN SUM(FOR i IN inventory \
    RETURN LENGTH(i.unmatchedOccurrences) == 0 ? 1 : LENGTH(i.unmatchedOccurrences))

occurrencequery.4a= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        SORT taxent.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: taxent})) \
    SORT i.unmatchedOccurrences[-1].dateInserted DESC, i._id \
    LIMIT %2$d, %3$d \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.4a.nouser= \
FOR i IN inventory \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        SORT taxent.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: taxent})) \
    SORT i.unmatchedOccurrences[-1].dateInserted DESC, i._id \
    LIMIT %2$d, %3$d \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.4a.count=RETURN SUM (FOR i IN inventory FILTER i.maintainer == '%1$s' RETURN 1)
occurrencequery.4a.nouser.count=RETURN SUM (FOR i IN inventory RETURN 1)

occurrencequery.5= \
FOR i IN inventory \
    FILTER i._id IN @ids \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        SORT taxent.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: taxent})) \
    LET usernames = i.observers == null ? null : ( \
        FILTER i.observers != null FOR un IN i.observers \
        FOR u IN user FILTER u._id == un RETURN u.name \
    ) \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ, observerNames: usernames, maintainerName: DOCUMENT(i.maintainer).name})

occurrencequery.6= \
FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
            FOR u IN user FILTER u._id == un RETURN u.name \
        ) \
        RETURN MERGE(i, {observerNames: usernames, maintainerName: DOCUMENT(i.maintainer).name})

occurrencequery.6a= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.verbTaxon != null \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
            FOR u IN user FILTER u._id == un RETURN u.name \
        ) \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {unmatchedOccurrences: [o], observerNames: usernames, maintainerName: DOCUMENT(i.maintainer).name})

occurrencequery.6a.count= \
FOR i IN inventory \
    FILTER i.maintainer == '%1$s' \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.verbTaxon != null \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        COLLECT WITH COUNT INTO len \
        RETURN len

occurrencequery.6a.nouser.count= \
FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.verbTaxon != null \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        COLLECT WITH COUNT INTO len \
        RETURN len

occurrencequery.6b= \
FOR i IN inventory \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.verbTaxon != null \
        LET match = (FOR te IN taxent FILTER te._id == o.taxEntMatch RETURN 1) \
        FILTER LENGTH(match) == 0 \
        LET usernames = i.observers == null ? null : ( \
            FILTER i.observers != null FOR un IN i.observers \
            FOR u IN user FILTER u._id == un RETURN u.name \
        ) \
        RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {unmatchedOccurrences: [o], observerNames: usernames, maintainerName: DOCUMENT(i.maintainer).name})

occurrencequery.7= \
FOR i IN inventory \
    FILTER i.maintainer == @user \
    LET willupdate = (FOR o IN i.unmatchedOccurrences FILTER o.uuid IN @uuids LIMIT 1 RETURN 1) \
    FILTER LENGTH(willupdate) > 0 \
    LET alteredList = ( \
        FOR o IN i.unmatchedOccurrences \
        LET newItem = (!(o.uuid IN @uuids) ? o : MERGE(o, { taxEntMatch: @replace })) RETURN newItem) \
    UPDATE i WITH { unmatchedOccurrences:  alteredList } IN inventory

occurrencequery.7a= \
FOR i IN inventory \
    LET willupdate = (FOR o IN i.unmatchedOccurrences FILTER o.uuid IN @uuids LIMIT 1 RETURN 1) \
    FILTER LENGTH(willupdate) > 0 \
    LET alteredList = ( \
        FOR o IN i.unmatchedOccurrences \
        LET newItem = (!(o.uuid IN @uuids) ? o : MERGE(o, { taxEntMatch: @replace })) RETURN newItem) \
    UPDATE i WITH { unmatchedOccurrences:  alteredList } IN inventory

#occurrencequery.8= \
#FOR a IN FLATTEN( \
#    FOR i IN inventory \
#        FILTER i.maintainer == @user \
#        LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
#            || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
#        LET occ = (FOR o IN i.unmatchedOccurrences \
#            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
#            FILTER LIKE(taxent.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
#                || selected \
#            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
#        FILTER LENGTH(occ) > 0 \
#        RETURN occ) \
#    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
#    LIMIT @offset, @count \
#    RETURN a

fragmentreturnoccurrencebyfilter= \
    LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
        || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
    FOR o IN i.unmatchedOccurrences \
        LET te = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        FILTER LIKE(te.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
            || selected \
        SORT o.dateInserted DESC, o.verbTaxon, o.uuid \
        LIMIT @offset, @count \
        RETURN {i:i, o:MERGE(o, {taxEnt: te})}) \
FOR io IN ret \
    RETURN MERGE(UNSET(io.i, 'unmatchedOccurrences'), {taxa: LENGTH(io.o) == 0 ? [] : [io.o]})

filter.maintainer=FILTER i.maintainer IN @user

# inventory date
filter.nulldate=FILTER (i.year == NULL || i.year == {@nodataint}) && (i.month == NULL || i.month == {@nodataint}) && (i.day == NULL || i.day == {@nodataint})
filter.day=FILTER i.day == @day
filter.month=FILTER i.month == @month
filter.year=FILTER i.year == @year
filter.daterange=LET dateconcat = CONCAT(i.year == NULL ? '5555' : i.year, '/', \
    i.month == NULL ? '05' : (i.month > 9 ? i.month : CONCAT('0', i.month)), '/', \
    i.day == NULL ? '15' : (i.day > 9 ? i.day : CONCAT('0', i.day))) \
    FILTER dateconcat >= @fromDate && dateconcat <= @toDate

# occurrence date inserted
filter.nulldateinserted=FILTER o.dateInserted == NULL
filter.dateInsertedRange=FILTER o.dateInserted >= @fromDateInserted && o.dateInserted <= @toDateInserted

filter.confidence=FILTER @confidence IN i.unmatchedOccurrences[*].confidence
filter.nullconfidence=FILTER NULL IN i.unmatchedOccurrences[*].confidence
filter.confidence.2=FILTER o.confidence == @confidence
filter.nullconfidence.2=FILTER o.confidence == NULL

filter.phenology=FILTER @phenoState IN i.unmatchedOccurrences[*].phenoState
filter.nullphenology=FILTER NULL IN i.unmatchedOccurrences[*].phenoState
filter.phenology.2=FILTER o.phenoState == @phenoState
filter.nullphenology.2=FILTER o.phenoState == NULL

filter.nullprecision=FILTER i.precision == NULL
filter.precision=FILTER i.precision == @precision

filter.nullverblocality=FILTER (i.verbLocality == NULL || i.verbLocality == '') && (i.locality == NULL || i.locality == '')
filter.verblocality=FILTER LIKE(i.verbLocality, @verbLocality, true) || LIKE(i.locality, @verbLocality, true)

filter.nullcredits=FILTER (i.credits == NULL || i.credits == '')
filter.credits=FILTER LIKE(i.credits, @credits, true)

filter.nullhabitat=FILTER (i.habitat == NULL || i.habitat == '')
filter.habitat=FILTER LIKE(i.habitat, @habitat, true)

filter.nullcode=FILTER i.code == NULL || i.code == ''
filter.code=FILTER LIKE(i.code, @code, true)

filter.nulllatitude=FILTER i.latitude == NULL
filter.nulllatitude.2=FILTER o.observationLatitude == NULL
filter.latitude=LET latfilter = (i.latitude >= @minlat && i.latitude <= @maxlat)
filter.latitude.2=FILTER (o.observationLatitude >= @minlat && o.observationLatitude <= @maxlat) || (latfilter && o.observationLatitude == NULL)
filter.ilatitude=FILTER i.latitude >= @minlat && i.latitude <= @maxlat

filter.nulllongitude=FILTER i.longitude == NULL
filter.nulllongitude.2=FILTER o.observationLongitude == NULL
filter.longitude=LET lngfilter = (i.longitude >= @minlng && i.longitude <= @maxlng)
filter.longitude.2=FILTER (o.observationLongitude >= @minlng && o.observationLongitude <= @maxlng) || (lngfilter && o.observationLongitude == NULL)
filter.ilongitude=FILTER i.longitude >= @minlng && i.longitude <= @maxlng

filter.nulltaxon=FILTER o.taxEntMatch == NULL || o.taxEntMatch == '' || o.verbTaxon == NULL || o.verbTaxon == ''
filter.taxon=LET tmpte = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) FILTER LIKE(tmpte.name, @taxon, true) || LIKE(o.verbTaxon, @taxon, true)

filter.nullGpsCode=FILTER o.gpsCode == NULL || o.gpsCode == ''
filter.gpsCode=FILTER LIKE(o.gpsCode, @gpscode, true)

filter.nullPrivateComment=FILTER o.privateComment == NULL || o.privateComment == ''
filter.privateComment=FILTER LIKE(o.privateComment, @privateComment, true)

filter.nullAccession=FILTER o.accession == NULL || o.accession == ''
filter.accession=FILTER LIKE(o.accession, @accession, true)

filter.nullObserver=FILTER i.observers == NULL || LENGTH(i.observers) == 0
filter.observer=FILTER i.observers ANY IN @observer

filter.nullCollector=FILTER i.collectors == NULL || LENGTH(i.collectors) == 0
filter.collector=FILTER i.collectors ANY IN @collector

filter.numberOfSpeciesZero=FILTER LENGTH(i.unmatchedOccurrences) == 1 && (i.unmatchedOccurrences[0].verbTaxon == NULL || i.unmatchedOccurrences[0].verbTaxon == "")
filter.numberOfSpecies=FILTER LENGTH(i.unmatchedOccurrences) >= @minnsp && LENGTH(i.unmatchedOccurrences) <= @maxnsp

filter.inventoryId=FILTER i._id == @inventoryId

filter.userId=FILTER i.maintainer == @userId || @userId IN i.observers || @userId IN i.collectors || @userId IN i.dets

filter.nulltag=FOR rl IN redlist_lu FILTER rl.taxEntID == o.taxEntMatch FILTER rl.tags == NULL || LENGTH(rl.tags) == 0
filter.tag=LET tagmatch = (FOR rl IN redlist_lu FILTER rl.taxEntID == o.taxEntMatch FILTER rl.tags FOR tag IN rl.tags FILTER LIKE(tag, @tag, true) RETURN 1) FILTER LENGTH(tagmatch) > 0


#|| LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true)
occurrencequery.8.withtextfilter= \
LET ret = (FOR i IN inventory \
    %1$s \
    LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
        || LIKE(i.locality, @query, true) \
    FOR o IN i.unmatchedOccurrences \
        %2$s \
        LET te = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        FILTER LIKE(te.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
            || selected \
        SORT o.dateInserted DESC, o.verbTaxon, o.uuid \
        LIMIT @offset, @count \
        RETURN {i:i, o:MERGE(o, {taxEnt: te})}) \
FOR io IN ret \
    RETURN MERGE(UNSET(io.i, 'unmatchedOccurrences'), {taxa: LENGTH(io.o) == 0 ? [] : [io.o]})

occurrencequery.8.withouttextfilter= \
LET ret = (FOR i IN inventory \
    %1$s \
    FOR o IN i.unmatchedOccurrences \
        %2$s \
        LET te = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        SORT o.dateInserted DESC, o.verbTaxon, o.uuid \
        LIMIT @offset, @count \
        RETURN {i:i, o:MERGE(o, {taxEnt: te})}) \
FOR io IN ret \
    RETURN MERGE(UNSET(io.i, 'unmatchedOccurrences'), {taxa: LENGTH(io.o) == 0 ? [] : [io.o]})

occurrencequery.8.count= \
RETURN SUM(FOR i IN inventory \
    %1$s \
    FOR o IN i.unmatchedOccurrences \
        %2$s \
        RETURN 1)


#occurrencequery.8a= \
#FOR a IN FLATTEN( \
#    FOR i IN inventory \
#        LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
#            || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
#        LET occ = (FOR o IN i.unmatchedOccurrences \
#            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
#            FILTER LIKE(taxent.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
#                || selected \
#            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: [MERGE(o, {taxEnt: taxent})]})) \
#        FILTER LENGTH(occ) > 0 \
#        RETURN occ) \
#    SORT a.taxa[0].dateInserted DESC, a.taxa[0].verbTaxon, a.taxa[0].uuid \
#    LIMIT @offset, @count \
#    RETURN a

occurrencequery.8a.count= \
RETURN SUM(FOR i IN inventory \
        LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
            || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
        LET occ = (FOR o IN i.unmatchedOccurrences \
            LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
            FILTER LIKE(taxent.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
                || selected \
            RETURN 1) \
        FILTER LENGTH(occ) > 0 \
        RETURN 1)

occurrencequery.9.withouttextfilter= \
FOR i IN inventory \
    %1$s \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        %2$s \
        LET te = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        SORT te.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: te})) \
    FILTER LENGTH(occ) > 0 \
    SORT i.unmatchedOccurrences[-1].dateInserted DESC, i._id \
    LIMIT @offset, @count \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencequery.9.withtextfilter= \
FOR i IN inventory \
    %1$s \
    LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
        || LIKE(i.locality, @query, true) \
    LET occ = (FOR o IN i.unmatchedOccurrences \
        %2$s \
        LET te = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
        FILTER LIKE(te.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
            || selected \
        SORT te.name, o.verbTaxon \
        RETURN MERGE(o, {taxEnt: te})) \
    FILTER LENGTH(occ) > 0 \
    SORT i.unmatchedOccurrences[-1].dateInserted DESC, i._id \
    LIMIT @offset, @count \
    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

#occurrencequery.9= \
#FOR i IN inventory \
#    FILTER i.maintainer == @user \
#    LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
#        || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
#    LET occ = (FOR o IN i.unmatchedOccurrences \
#        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
#        FILTER LIKE(taxent.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
#            || selected \
#        SORT taxent.name, o.verbTaxon \
#        RETURN MERGE(o, {taxEnt: taxent})) \
#    FILTER LENGTH(occ) > 0 \
#    SORT i.unmatchedOccurrences[-1].dateInserted DESC, i._id \
#    LIMIT @offset, @count \
#    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

#occurrencequery.9a= \
#FOR i IN inventory \
#    LET selected = LIKE(i.code, @query, true) || LIKE(i.verbLocality, @query, true) \
#        || LIKE(i.locality, @query, true) || LIKE(CONCAT(i.day, '/', i.month, '/', i.year), @query, true) \
#    LET occ = (FOR o IN i.unmatchedOccurrences \
#        LET taxent = o.taxEntMatch == null ? null : DOCUMENT(o.taxEntMatch) \
#        FILTER LIKE(taxent.name, @query, true) || LIKE(o.verbTaxon, @query, true) || LIKE(o.gpsCode, @query, true) \
#            || selected \
#        SORT taxent.name, o.verbTaxon \
#        RETURN MERGE(o, {taxEnt: taxent})) \
#    FILTER LENGTH(occ) > 0 \
#    SORT i.unmatchedOccurrences[-1].dateInserted DESC, i._id \
#    LIMIT @offset, @count \
#    RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {taxa: occ})

occurrencereportquery.1= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    COLLECT WITH COUNT INTO num \
    RETURN num

occurrencereportquery.1a= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null \
        COLLECT te = o.taxEntMatch INTO byTaxon \
        LET name = DOCUMENT(te).name \
        SORT name \
        RETURN {name: name, value: LENGTH(byTaxon[*].o)}

## list of target species
occurrencereportquery.3= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null \
        FOR v IN 0..100 OUTBOUND o.taxEntMatch PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
            LET trlde = (FOR rlde IN @@redlistcollection FILTER rlde.taxEntID == v._id && rlde.tags ANY == @tag RETURN 1) \
            FILTER LENGTH(trlde) > 0 \
            RETURN DISTINCT v

## target species with photos
occurrencereportquery.4= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null && o.hasPhoto != null && o.hasPhoto != 'No' && o.hasPhoto != '' && o.hasPhoto != 'NULL'\
        FOR v IN 0..100 OUTBOUND o.taxEntMatch PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
            LET trlde = (FOR rlde IN @@redlistcollection FILTER rlde.taxEntID == v._id && rlde.tags ANY == @tag RETURN 1) \
            FILTER LENGTH(trlde) > 0 \
            RETURN DISTINCT v

## target species with how many specimens collected
occurrencereportquery.5= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null && o.hasSpecimen > 0 \
        FOR v IN 0..100 OUTBOUND o.taxEntMatch PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
            LET trlde = (FOR rlde IN @@redlistcollection FILTER rlde.taxEntID == v._id && rlde.tags ANY == @tag RETURN 1) \
            FILTER LENGTH(trlde) > 0 \
            COLLECT te = v.name INTO byTaxon \
            RETURN {name: te, value: SUM(byTaxon[*].o.hasSpecimen)}

## list of target species with number of records of each
occurrencereportquery.6= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null \
        FOR v IN 0..100 OUTBOUND o.taxEntMatch PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
            LET trlde = (FOR rlde IN @@redlistcollection FILTER rlde.taxEntID == v._id && rlde.tags ANY == @tag RETURN 1) \
            FILTER LENGTH(trlde) > 0 \
            COLLECT te = v.name INTO byTaxon \
            RETURN {name: te, value: LENGTH(byTaxon[*].o)}

occurrencereportquery.7= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null && o.abundance != null && o.abundance != '' \
        FOR v IN 0..100 OUTBOUND o.taxEntMatch PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
            LET trlde = (FOR rlde IN @@redlistcollection FILTER rlde.taxEntID == v._id && rlde.tags ANY == @tag RETURN 1) \
            FILTER LENGTH(trlde) > 0 \
            COLLECT te = v.name INTO byTaxon \
            RETURN {name: te, value: LENGTH(byTaxon[*].o)}

reportquery.1= \
FOR rlde IN @@redlistcollection \
    FILTER rlde.assessment.authors ANY == @user \
    FOR t IN taxent FILTER t._id == rlde.taxEntID \
    RETURN t

reportquery.1a= \
FOR rlde IN @@redlistcollection \
    FILTER rlde.assessment.evaluator ANY == @user \
    FOR t IN taxent FILTER t._id == rlde.taxEntID \
    RETURN t

reportquery.1b= \
FOR rlde IN @@redlistcollection \
    FILTER rlde.assessment.reviewer ANY == @user \
    FOR t IN taxent FILTER t._id == rlde.taxEntID \
    RETURN t

## target species with how many specimens collected
occurrencereportquery.8= \
FOR i IN inventory \
    FILTER i.observers ANY == @user \
    LET rdate = DATE_ISO8601(i.year, i.month, i.day) \
    FILTER rdate >= @from && rdate <= @to \
    FOR o IN i.unmatchedOccurrences \
        FILTER o.taxEntMatch != null && o.hasSpecimen > 0 \
        FOR v IN 0..100 OUTBOUND o.taxEntMatch PART_OF, ANY SYNONYM OPTIONS {uniqueVertices: 'path'} \
            LET trlde = (FOR rlde IN @@redlistcollection FILTER rlde.taxEntID == v._id && rlde.tags ANY == @tag RETURN 1) \
            FILTER LENGTH(trlde) > 0 \
            RETURN MERGE(UNSET(i, 'unmatchedOccurrences'), {occurrence: o})
